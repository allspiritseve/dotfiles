#!/bin/bash

if [ ! -d ./.git ]; then
  echo "Couldn't find git repo... are you in the right directory?"
  exit 1
fi

case "$1" in
  production) environment=production; shift;;
  staging) environment=staging; shift;;
  *) environment=staging;;
esac

if [ -f ./.beornrc ]; then
  source ./.beornrc
fi

platform=${platform-'custom'}
remote=${remote-$environment}
user=${user-'web'}
commands=()

# Helpers

while getopts t opt; do
  case $opt in
    t) autotag=true;;
  esac
done

init_heroku() {
  if [ -z "$app" ]; then
    echo "Can't determine Heroku application name. Please add it to .beornrc"
    exit 1
  fi

  config() {
    echo_exec "heroku config --app $app"
  }

  deploy() {
    confirm_deploy "Deploy latest commit to Heroku $remote?"
    echo_exec "git push $remote master" && echo_exec "rake db:migrate"
  }

  redeploy() {
    confirm_deploy "Redeploy latest commit to Heroku $remote?"

    echo "Ok, redeploying latest commit to Heroku $remote!"

    echo_exec "git push $remote master" && echo_exec "rake db:migrate"
  }

  run() {
    echo_exec "heroku run $@ --app $app"
  }

  status() {
    echo "This is a Heroku app."
  }

  commands=(${commands[@]} deploy redeploy run config status)
}

init_custom() {
  deploy() {
    tag=$(current_tag)

    confirm_deploy "Deploy release $tag to $remote?"

    echo "Ok, deploying release $tag to $remote!"

    git push $remote $tag
  }

  redeploy() {
    tag=$(current_tag)

    confirm_deploy "Redeploy" $tag

    echo "Ok, redeploying release $tag to $remote!"
    git push -f $remote $tag
  }

  run() {
    ssh -t $user@$host run $@
  }

  status() {
    tag=$(current_tag)

    set -- $(git rev-list --left-right --count $tag...HEAD)
    
    echo "Current tag $tag"
    echo "Your branch is ahead $2 commits and behind $1 commits"
    echo "  (use beorn tag to create another release)"
  }

  commands=(${commands[@]} deploy redeploy run status)
}

confirm_deploy() {
  read -p "${1-"Deploy release $tag to $remote?"} (y/n) " deploy

  if [[ "$deploy" != "y" ]]; then
    echo "Deploy cancelled!"
    exit 1
  fi
}

# Commands
bash() {
  ssh $host
}

commands() {
  for cmd in "${commands[@]}"; do
    echo $cmd
  done | sort -du
}

current_tag() {
  git tag -l | tail -n 1
}

migrate() {
  bundle exec rake db:migrate db:rollback && bundle exec rake db:migrate
}

next_tag() {
  timestamp=`date +%Y%m%d`
  count=`git tag -l "$timestamp-*" | wc -l`
  echo $timestamp-`expr $count + 1`
}

retag() {
  # git commit --amend --no-edit

  tag=$(current_tag)

  git tag -d $tag
  git tag $tag
  # git push -f origin $tag

  echo "Ok, retagged release $tag."
}

sync() {
  git fetch
  git push
}

tag_release() {
  git tag $(next_tag)
  # git push origin master --tags

  # echo "Ok, tagged release $tag."
}

commands=(${commands[@]} bash commands console current_tag migrate next_tag retag status sync tag_release)

# Internal

beorn_echo() {
  echo " -> $@"
}

beorn_join() {
  local IFS="$1"; shift; echo "$*";
}

echo_exec() {
  beorn_echo $@
  $@
}

init_${platform}

case "$1" in
  b|bash) bash;;
  commands) commands;;
  c|console) run rails console;;
  config) config;;
  d|deploy) deploy;;
  migrate) migrate;;
  rake) run $@;;
  tag) tag_release;;
  retag) retag;;
  redeploy) redeploy;;
  r|run) $@;;
  status) status;;
  sync) sync;;
  u|update)
    ssh $host 'sudo apt-get update && sudo apt-get upgrade'
    ;;
  *)
    echo -e "\nDid not recognize command '$1'\n\nUsage: beorn ($(beorn_join '|' ${commands[@]}))" >&2
    exit 1
    ;;
esac
